// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `ATCDisplay.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __ATCDisplay_h__
#define __ATCDisplay_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace ATCDisplay
{

class AirportInterface;
class AirportInterfacePrx;

}

namespace ATCDisplay
{

struct ATCDPosition
{
    ::std::string name;
    float x;
    float y;
    float z;

    std::tuple<const ::std::string&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(name, x, y, z);
    }
};

using ATCDRoute = ::std::vector<::ATCDisplay::ATCDPosition>;

struct ATCDStorm
{
    bool valid;
    float speed;
    ::ATCDisplay::ATCDPosition pos;
    float bearing;
    float radious;
    float height;

    std::tuple<const bool&, const float&, const ::ATCDisplay::ATCDPosition&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(valid, speed, pos, bearing, radious, height);
    }
};

struct ATCDFlight
{
    float points;
    float speed;
    bool focused;
    ::std::string id;
    ::ATCDisplay::ATCDPosition pos;
    float inclination;
    float bearing;
    float collisionRadious;
    ::ATCDisplay::ATCDRoute flightRoute;

    std::tuple<const float&, const float&, const bool&, const ::std::string&, const ::ATCDisplay::ATCDPosition&, const float&, const float&, const float&, const ::ATCDisplay::ATCDRoute&> ice_tuple() const
    {
        return std::tie(points, speed, focused, id, pos, inclination, bearing, collisionRadious, flightRoute);
    }
};

using ATCDFlights = ::std::vector<::ATCDisplay::ATCDFlight>;

struct ATCDLandStrip
{
    ::ATCDisplay::ATCDPosition pos;
    float width;
    float length;
    float orientation;

    std::tuple<const ::ATCDisplay::ATCDPosition&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(pos, width, length, orientation);
    }
};

using ATCDLandStrips = ::std::vector<::ATCDisplay::ATCDLandStrip>;

struct ATCDAirport
{
    ::ATCDisplay::ATCDLandStrips airportLandstrips;
    float radious;

    std::tuple<const ::ATCDisplay::ATCDLandStrips&, const float&> ice_tuple() const
    {
        return std::tie(airportLandstrips, radious);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace ATCDisplay
{

class AirportInterface : public virtual ::Ice::Object
{
public:

    using ProxyType = AirportInterfacePrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual ::ATCDisplay::ATCDFlights getFlights(const ::Ice::Current&) = 0;
    bool _iceD_getFlights(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::ATCDisplay::ATCDStorm getStorm(const ::Ice::Current&) = 0;
    bool _iceD_getStorm(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::ATCDisplay::ATCDAirport getAirportInfo(const ::Ice::Current&) = 0;
    bool _iceD_getAirportInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void UpdateSimT(float, const ::Ice::Current&) = 0;
    bool _iceD_UpdateSimT(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void NextFocus(const ::Ice::Current&) = 0;
    bool _iceD_NextFocus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual float getSimT(const ::Ice::Current&) = 0;
    bool _iceD_getSimT(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual int getMaxFlights(const ::Ice::Current&) = 0;
    bool _iceD_getMaxFlights(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual int getPoints(const ::Ice::Current&) = 0;
    bool _iceD_getPoints(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace ATCDisplay
{

class AirportInterfacePrx : public virtual ::Ice::Proxy<AirportInterfacePrx, ::Ice::ObjectPrx>
{
public:

    ::ATCDisplay::ATCDFlights getFlights(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::ATCDisplay::ATCDFlights>(true, this, &ATCDisplay::AirportInterfacePrx::_iceI_getFlights, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getFlightsAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::ATCDisplay::ATCDFlights>>().get_future())
    {
        return _makePromiseOutgoing<::ATCDisplay::ATCDFlights, P>(false, this, &ATCDisplay::AirportInterfacePrx::_iceI_getFlights, context);
    }

    ::std::function<void()>
    getFlightsAsync(::std::function<void(::ATCDisplay::ATCDFlights)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::ATCDisplay::ATCDFlights>(response, ex, sent, this, &ATCDisplay::AirportInterfacePrx::_iceI_getFlights, context);
    }

    void _iceI_getFlights(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::ATCDisplay::ATCDFlights>>&, const ::Ice::Context&);

    ::ATCDisplay::ATCDStorm getStorm(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::ATCDisplay::ATCDStorm>(true, this, &ATCDisplay::AirportInterfacePrx::_iceI_getStorm, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getStormAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::ATCDisplay::ATCDStorm>>().get_future())
    {
        return _makePromiseOutgoing<::ATCDisplay::ATCDStorm, P>(false, this, &ATCDisplay::AirportInterfacePrx::_iceI_getStorm, context);
    }

    ::std::function<void()>
    getStormAsync(::std::function<void(::ATCDisplay::ATCDStorm)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::ATCDisplay::ATCDStorm>(response, ex, sent, this, &ATCDisplay::AirportInterfacePrx::_iceI_getStorm, context);
    }

    void _iceI_getStorm(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::ATCDisplay::ATCDStorm>>&, const ::Ice::Context&);

    ::ATCDisplay::ATCDAirport getAirportInfo(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::ATCDisplay::ATCDAirport>(true, this, &ATCDisplay::AirportInterfacePrx::_iceI_getAirportInfo, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getAirportInfoAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::ATCDisplay::ATCDAirport>>().get_future())
    {
        return _makePromiseOutgoing<::ATCDisplay::ATCDAirport, P>(false, this, &ATCDisplay::AirportInterfacePrx::_iceI_getAirportInfo, context);
    }

    ::std::function<void()>
    getAirportInfoAsync(::std::function<void(::ATCDisplay::ATCDAirport)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::ATCDisplay::ATCDAirport>(response, ex, sent, this, &ATCDisplay::AirportInterfacePrx::_iceI_getAirportInfo, context);
    }

    void _iceI_getAirportInfo(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::ATCDisplay::ATCDAirport>>&, const ::Ice::Context&);

    void UpdateSimT(float iceP_inc, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ATCDisplay::AirportInterfacePrx::_iceI_UpdateSimT, iceP_inc, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto UpdateSimTAsync(float iceP_inc, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ATCDisplay::AirportInterfacePrx::_iceI_UpdateSimT, iceP_inc, context);
    }

    ::std::function<void()>
    UpdateSimTAsync(float iceP_inc,
                    ::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &ATCDisplay::AirportInterfacePrx::_iceI_UpdateSimT, iceP_inc, context);
    }

    void _iceI_UpdateSimT(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, const ::Ice::Context&);

    void NextFocus(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &ATCDisplay::AirportInterfacePrx::_iceI_NextFocus, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto NextFocusAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &ATCDisplay::AirportInterfacePrx::_iceI_NextFocus, context);
    }

    ::std::function<void()>
    NextFocusAsync(::std::function<void()> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &ATCDisplay::AirportInterfacePrx::_iceI_NextFocus, context);
    }

    void _iceI_NextFocus(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);

    float getSimT(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<float>(true, this, &ATCDisplay::AirportInterfacePrx::_iceI_getSimT, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getSimTAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<float>>().get_future())
    {
        return _makePromiseOutgoing<float, P>(false, this, &ATCDisplay::AirportInterfacePrx::_iceI_getSimT, context);
    }

    ::std::function<void()>
    getSimTAsync(::std::function<void(float)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<float>(response, ex, sent, this, &ATCDisplay::AirportInterfacePrx::_iceI_getSimT, context);
    }

    void _iceI_getSimT(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<float>>&, const ::Ice::Context&);

    int getMaxFlights(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &ATCDisplay::AirportInterfacePrx::_iceI_getMaxFlights, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getMaxFlightsAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &ATCDisplay::AirportInterfacePrx::_iceI_getMaxFlights, context);
    }

    ::std::function<void()>
    getMaxFlightsAsync(::std::function<void(int)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<int>(response, ex, sent, this, &ATCDisplay::AirportInterfacePrx::_iceI_getMaxFlights, context);
    }

    void _iceI_getMaxFlights(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, const ::Ice::Context&);

    int getPoints(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &ATCDisplay::AirportInterfacePrx::_iceI_getPoints, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getPointsAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &ATCDisplay::AirportInterfacePrx::_iceI_getPoints, context);
    }

    ::std::function<void()>
    getPointsAsync(::std::function<void(int)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<int>(response, ex, sent, this, &ATCDisplay::AirportInterfacePrx::_iceI_getPoints, context);
    }

    void _iceI_getPoints(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    AirportInterfacePrx() = default;
    friend ::std::shared_ptr<AirportInterfacePrx> IceInternal::createProxy<AirportInterfacePrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

template<>
struct StreamableTraits<::ATCDisplay::ATCDPosition>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 13;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::ATCDisplay::ATCDPosition, S>
{
    static void read(S* istr, ::ATCDisplay::ATCDPosition& v)
    {
        istr->readAll(v.name, v.x, v.y, v.z);
    }
};

template<>
struct StreamableTraits<::ATCDisplay::ATCDStorm>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 30;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::ATCDisplay::ATCDStorm, S>
{
    static void read(S* istr, ::ATCDisplay::ATCDStorm& v)
    {
        istr->readAll(v.valid, v.speed, v.pos, v.bearing, v.radious, v.height);
    }
};

template<>
struct StreamableTraits<::ATCDisplay::ATCDFlight>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 36;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::ATCDisplay::ATCDFlight, S>
{
    static void read(S* istr, ::ATCDisplay::ATCDFlight& v)
    {
        istr->readAll(v.points, v.speed, v.focused, v.id, v.pos, v.inclination, v.bearing, v.collisionRadious, v.flightRoute);
    }
};

template<>
struct StreamableTraits<::ATCDisplay::ATCDLandStrip>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 25;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::ATCDisplay::ATCDLandStrip, S>
{
    static void read(S* istr, ::ATCDisplay::ATCDLandStrip& v)
    {
        istr->readAll(v.pos, v.width, v.length, v.orientation);
    }
};

template<>
struct StreamableTraits<::ATCDisplay::ATCDAirport>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::ATCDisplay::ATCDAirport, S>
{
    static void read(S* istr, ::ATCDisplay::ATCDAirport& v)
    {
        istr->readAll(v.airportLandstrips, v.radious);
    }
};

}

namespace ATCDisplay
{

using AirportInterfacePtr = ::std::shared_ptr<AirportInterface>;
using AirportInterfacePrxPtr = ::std::shared_ptr<AirportInterfacePrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace ATCDisplay
{

class AirportInterface;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::ATCDisplay::AirportInterface>&);
::IceProxy::Ice::Object* upCast(::IceProxy::ATCDisplay::AirportInterface*);

}

}

namespace ATCDisplay
{

class AirportInterface;
::Ice::Object* upCast(::ATCDisplay::AirportInterface*);
typedef ::IceInternal::Handle< ::ATCDisplay::AirportInterface> AirportInterfacePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::ATCDisplay::AirportInterface> AirportInterfacePrx;
typedef AirportInterfacePrx AirportInterfacePrxPtr;
void _icePatchObjectPtr(AirportInterfacePtr&, const ::Ice::ObjectPtr&);

}

namespace ATCDisplay
{

struct ATCDPosition
{
    ::std::string name;
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
};

typedef ::std::vector< ::ATCDisplay::ATCDPosition> ATCDRoute;

struct ATCDStorm
{
    bool valid;
    ::Ice::Float speed;
    ::ATCDisplay::ATCDPosition pos;
    ::Ice::Float bearing;
    ::Ice::Float radious;
    ::Ice::Float height;
};

struct ATCDFlight
{
    ::Ice::Float points;
    ::Ice::Float speed;
    bool focused;
    ::std::string id;
    ::ATCDisplay::ATCDPosition pos;
    ::Ice::Float inclination;
    ::Ice::Float bearing;
    ::Ice::Float collisionRadious;
    ::ATCDisplay::ATCDRoute flightRoute;
};

typedef ::std::vector< ::ATCDisplay::ATCDFlight> ATCDFlights;

struct ATCDLandStrip
{
    ::ATCDisplay::ATCDPosition pos;
    ::Ice::Float width;
    ::Ice::Float length;
    ::Ice::Float orientation;
};

typedef ::std::vector< ::ATCDisplay::ATCDLandStrip> ATCDLandStrips;

struct ATCDAirport
{
    ::ATCDisplay::ATCDLandStrips airportLandstrips;
    ::Ice::Float radious;
};

}

namespace ATCDisplay
{

class Callback_AirportInterface_getFlights_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AirportInterface_getFlights_Base> Callback_AirportInterface_getFlightsPtr;

class Callback_AirportInterface_getStorm_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AirportInterface_getStorm_Base> Callback_AirportInterface_getStormPtr;

class Callback_AirportInterface_getAirportInfo_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AirportInterface_getAirportInfo_Base> Callback_AirportInterface_getAirportInfoPtr;

class Callback_AirportInterface_UpdateSimT_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AirportInterface_UpdateSimT_Base> Callback_AirportInterface_UpdateSimTPtr;

class Callback_AirportInterface_NextFocus_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AirportInterface_NextFocus_Base> Callback_AirportInterface_NextFocusPtr;

class Callback_AirportInterface_getSimT_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AirportInterface_getSimT_Base> Callback_AirportInterface_getSimTPtr;

class Callback_AirportInterface_getMaxFlights_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AirportInterface_getMaxFlights_Base> Callback_AirportInterface_getMaxFlightsPtr;

class Callback_AirportInterface_getPoints_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_AirportInterface_getPoints_Base> Callback_AirportInterface_getPointsPtr;

}

namespace IceProxy
{

namespace ATCDisplay
{

class AirportInterface : public virtual ::Ice::Proxy<AirportInterface, ::IceProxy::Ice::Object>
{
public:

    ::ATCDisplay::ATCDFlights getFlights(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getFlights(_iceI_begin_getFlights(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getFlights(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getFlights(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getFlights(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFlights(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getFlights(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFlights(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getFlights(const ::ATCDisplay::Callback_AirportInterface_getFlightsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFlights(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getFlights(const ::Ice::Context& context, const ::ATCDisplay::Callback_AirportInterface_getFlightsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getFlights(context, del, cookie);
    }

    ::ATCDisplay::ATCDFlights end_getFlights(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getFlights(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::ATCDisplay::ATCDStorm getStorm(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getStorm(_iceI_begin_getStorm(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getStorm(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getStorm(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStorm(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStorm(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getStorm(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStorm(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getStorm(const ::ATCDisplay::Callback_AirportInterface_getStormPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStorm(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getStorm(const ::Ice::Context& context, const ::ATCDisplay::Callback_AirportInterface_getStormPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getStorm(context, del, cookie);
    }

    ::ATCDisplay::ATCDStorm end_getStorm(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getStorm(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::ATCDisplay::ATCDAirport getAirportInfo(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getAirportInfo(_iceI_begin_getAirportInfo(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getAirportInfo(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getAirportInfo(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAirportInfo(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAirportInfo(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAirportInfo(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAirportInfo(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAirportInfo(const ::ATCDisplay::Callback_AirportInterface_getAirportInfoPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAirportInfo(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAirportInfo(const ::Ice::Context& context, const ::ATCDisplay::Callback_AirportInterface_getAirportInfoPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAirportInfo(context, del, cookie);
    }

    ::ATCDisplay::ATCDAirport end_getAirportInfo(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getAirportInfo(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void UpdateSimT(::Ice::Float iceP_inc, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_UpdateSimT(_iceI_begin_UpdateSimT(iceP_inc, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_UpdateSimT(::Ice::Float iceP_inc, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_UpdateSimT(iceP_inc, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UpdateSimT(::Ice::Float iceP_inc, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_UpdateSimT(iceP_inc, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateSimT(::Ice::Float iceP_inc, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_UpdateSimT(iceP_inc, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateSimT(::Ice::Float iceP_inc, const ::ATCDisplay::Callback_AirportInterface_UpdateSimTPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_UpdateSimT(iceP_inc, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateSimT(::Ice::Float iceP_inc, const ::Ice::Context& context, const ::ATCDisplay::Callback_AirportInterface_UpdateSimTPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_UpdateSimT(iceP_inc, context, del, cookie);
    }

    void end_UpdateSimT(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_UpdateSimT(::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void NextFocus(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_NextFocus(_iceI_begin_NextFocus(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_NextFocus(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_NextFocus(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_NextFocus(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_NextFocus(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_NextFocus(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_NextFocus(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_NextFocus(const ::ATCDisplay::Callback_AirportInterface_NextFocusPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_NextFocus(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_NextFocus(const ::Ice::Context& context, const ::ATCDisplay::Callback_AirportInterface_NextFocusPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_NextFocus(context, del, cookie);
    }

    void end_NextFocus(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_NextFocus(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Float getSimT(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getSimT(_iceI_begin_getSimT(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getSimT(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getSimT(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSimT(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSimT(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSimT(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSimT(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSimT(const ::ATCDisplay::Callback_AirportInterface_getSimTPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSimT(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getSimT(const ::Ice::Context& context, const ::ATCDisplay::Callback_AirportInterface_getSimTPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getSimT(context, del, cookie);
    }

    ::Ice::Float end_getSimT(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getSimT(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int getMaxFlights(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getMaxFlights(_iceI_begin_getMaxFlights(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getMaxFlights(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getMaxFlights(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getMaxFlights(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMaxFlights(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMaxFlights(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMaxFlights(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMaxFlights(const ::ATCDisplay::Callback_AirportInterface_getMaxFlightsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMaxFlights(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getMaxFlights(const ::Ice::Context& context, const ::ATCDisplay::Callback_AirportInterface_getMaxFlightsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getMaxFlights(context, del, cookie);
    }

    ::Ice::Int end_getMaxFlights(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getMaxFlights(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Ice::Int getPoints(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getPoints(_iceI_begin_getPoints(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getPoints(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPoints(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPoints(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::ATCDisplay::Callback_AirportInterface_getPointsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPoints(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPoints(const ::Ice::Context& context, const ::ATCDisplay::Callback_AirportInterface_getPointsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPoints(context, del, cookie);
    }

    ::Ice::Int end_getPoints(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getPoints(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace ATCDisplay
{

class AirportInterface : public virtual ::Ice::Object
{
public:

    typedef AirportInterfacePrx ProxyType;
    typedef AirportInterfacePtr PointerType;

    virtual ~AirportInterface();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual ::ATCDisplay::ATCDFlights getFlights(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getFlights(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::ATCDisplay::ATCDStorm getStorm(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getStorm(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::ATCDisplay::ATCDAirport getAirportInfo(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getAirportInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void UpdateSimT(::Ice::Float, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_UpdateSimT(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void NextFocus(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_NextFocus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Float getSimT(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getSimT(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getMaxFlights(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getMaxFlights(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getPoints(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getPoints(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const AirportInterface& lhs, const AirportInterface& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const AirportInterface& lhs, const AirportInterface& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

template<>
struct StreamableTraits< ::ATCDisplay::ATCDPosition>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 13;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::ATCDisplay::ATCDPosition, S>
{
    static void write(S* ostr, const ::ATCDisplay::ATCDPosition& v)
    {
        ostr->write(v.name);
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.z);
    }
};

template<typename S>
struct StreamReader< ::ATCDisplay::ATCDPosition, S>
{
    static void read(S* istr, ::ATCDisplay::ATCDPosition& v)
    {
        istr->read(v.name);
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.z);
    }
};

template<>
struct StreamableTraits< ::ATCDisplay::ATCDStorm>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 30;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::ATCDisplay::ATCDStorm, S>
{
    static void write(S* ostr, const ::ATCDisplay::ATCDStorm& v)
    {
        ostr->write(v.valid);
        ostr->write(v.speed);
        ostr->write(v.pos);
        ostr->write(v.bearing);
        ostr->write(v.radious);
        ostr->write(v.height);
    }
};

template<typename S>
struct StreamReader< ::ATCDisplay::ATCDStorm, S>
{
    static void read(S* istr, ::ATCDisplay::ATCDStorm& v)
    {
        istr->read(v.valid);
        istr->read(v.speed);
        istr->read(v.pos);
        istr->read(v.bearing);
        istr->read(v.radious);
        istr->read(v.height);
    }
};

template<>
struct StreamableTraits< ::ATCDisplay::ATCDFlight>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 36;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::ATCDisplay::ATCDFlight, S>
{
    static void write(S* ostr, const ::ATCDisplay::ATCDFlight& v)
    {
        ostr->write(v.points);
        ostr->write(v.speed);
        ostr->write(v.focused);
        ostr->write(v.id);
        ostr->write(v.pos);
        ostr->write(v.inclination);
        ostr->write(v.bearing);
        ostr->write(v.collisionRadious);
        ostr->write(v.flightRoute);
    }
};

template<typename S>
struct StreamReader< ::ATCDisplay::ATCDFlight, S>
{
    static void read(S* istr, ::ATCDisplay::ATCDFlight& v)
    {
        istr->read(v.points);
        istr->read(v.speed);
        istr->read(v.focused);
        istr->read(v.id);
        istr->read(v.pos);
        istr->read(v.inclination);
        istr->read(v.bearing);
        istr->read(v.collisionRadious);
        istr->read(v.flightRoute);
    }
};

template<>
struct StreamableTraits< ::ATCDisplay::ATCDLandStrip>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 25;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::ATCDisplay::ATCDLandStrip, S>
{
    static void write(S* ostr, const ::ATCDisplay::ATCDLandStrip& v)
    {
        ostr->write(v.pos);
        ostr->write(v.width);
        ostr->write(v.length);
        ostr->write(v.orientation);
    }
};

template<typename S>
struct StreamReader< ::ATCDisplay::ATCDLandStrip, S>
{
    static void read(S* istr, ::ATCDisplay::ATCDLandStrip& v)
    {
        istr->read(v.pos);
        istr->read(v.width);
        istr->read(v.length);
        istr->read(v.orientation);
    }
};

template<>
struct StreamableTraits< ::ATCDisplay::ATCDAirport>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 5;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::ATCDisplay::ATCDAirport, S>
{
    static void write(S* ostr, const ::ATCDisplay::ATCDAirport& v)
    {
        ostr->write(v.airportLandstrips);
        ostr->write(v.radious);
    }
};

template<typename S>
struct StreamReader< ::ATCDisplay::ATCDAirport, S>
{
    static void read(S* istr, ::ATCDisplay::ATCDAirport& v)
    {
        istr->read(v.airportLandstrips);
        istr->read(v.radious);
    }
};

}

namespace ATCDisplay
{

template<class T>
class CallbackNC_AirportInterface_getFlights : public Callback_AirportInterface_getFlights_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::ATCDisplay::ATCDFlights&);

    CallbackNC_AirportInterface_getFlights(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::ATCDisplay::AirportInterfacePrx proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(result->getProxy());
        ::ATCDisplay::ATCDFlights ret;
        try
        {
            ret = proxy->end_getFlights(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_AirportInterface_getFlightsPtr
newCallback_AirportInterface_getFlights(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::ATCDisplay::ATCDFlights&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getFlights<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_getFlightsPtr
newCallback_AirportInterface_getFlights(T* instance, void (T::*cb)(const ::ATCDisplay::ATCDFlights&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getFlights<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AirportInterface_getFlights : public Callback_AirportInterface_getFlights_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::ATCDisplay::ATCDFlights&, const CT&);

    Callback_AirportInterface_getFlights(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::ATCDisplay::AirportInterfacePrx proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(result->getProxy());
        ::ATCDisplay::ATCDFlights ret;
        try
        {
            ret = proxy->end_getFlights(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_AirportInterface_getFlightsPtr
newCallback_AirportInterface_getFlights(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::ATCDisplay::ATCDFlights&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getFlights<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_getFlightsPtr
newCallback_AirportInterface_getFlights(T* instance, void (T::*cb)(const ::ATCDisplay::ATCDFlights&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getFlights<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AirportInterface_getStorm : public Callback_AirportInterface_getStorm_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::ATCDisplay::ATCDStorm&);

    CallbackNC_AirportInterface_getStorm(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::ATCDisplay::AirportInterfacePrx proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(result->getProxy());
        ::ATCDisplay::ATCDStorm ret;
        try
        {
            ret = proxy->end_getStorm(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_AirportInterface_getStormPtr
newCallback_AirportInterface_getStorm(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::ATCDisplay::ATCDStorm&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getStorm<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_getStormPtr
newCallback_AirportInterface_getStorm(T* instance, void (T::*cb)(const ::ATCDisplay::ATCDStorm&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getStorm<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AirportInterface_getStorm : public Callback_AirportInterface_getStorm_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::ATCDisplay::ATCDStorm&, const CT&);

    Callback_AirportInterface_getStorm(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::ATCDisplay::AirportInterfacePrx proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(result->getProxy());
        ::ATCDisplay::ATCDStorm ret;
        try
        {
            ret = proxy->end_getStorm(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_AirportInterface_getStormPtr
newCallback_AirportInterface_getStorm(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::ATCDisplay::ATCDStorm&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getStorm<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_getStormPtr
newCallback_AirportInterface_getStorm(T* instance, void (T::*cb)(const ::ATCDisplay::ATCDStorm&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getStorm<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AirportInterface_getAirportInfo : public Callback_AirportInterface_getAirportInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::ATCDisplay::ATCDAirport&);

    CallbackNC_AirportInterface_getAirportInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::ATCDisplay::AirportInterfacePrx proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(result->getProxy());
        ::ATCDisplay::ATCDAirport ret;
        try
        {
            ret = proxy->end_getAirportInfo(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_AirportInterface_getAirportInfoPtr
newCallback_AirportInterface_getAirportInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::ATCDisplay::ATCDAirport&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getAirportInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_getAirportInfoPtr
newCallback_AirportInterface_getAirportInfo(T* instance, void (T::*cb)(const ::ATCDisplay::ATCDAirport&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getAirportInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AirportInterface_getAirportInfo : public Callback_AirportInterface_getAirportInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::ATCDisplay::ATCDAirport&, const CT&);

    Callback_AirportInterface_getAirportInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::ATCDisplay::AirportInterfacePrx proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(result->getProxy());
        ::ATCDisplay::ATCDAirport ret;
        try
        {
            ret = proxy->end_getAirportInfo(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_AirportInterface_getAirportInfoPtr
newCallback_AirportInterface_getAirportInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::ATCDisplay::ATCDAirport&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getAirportInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_getAirportInfoPtr
newCallback_AirportInterface_getAirportInfo(T* instance, void (T::*cb)(const ::ATCDisplay::ATCDAirport&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getAirportInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AirportInterface_UpdateSimT : public Callback_AirportInterface_UpdateSimT_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AirportInterface_UpdateSimT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_UpdateSimT<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_UpdateSimT<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_UpdateSimT<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_UpdateSimT<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AirportInterface_UpdateSimT : public Callback_AirportInterface_UpdateSimT_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AirportInterface_UpdateSimT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_UpdateSimT<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_UpdateSimT<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_UpdateSimT<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_UpdateSimTPtr
newCallback_AirportInterface_UpdateSimT(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_UpdateSimT<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AirportInterface_NextFocus : public Callback_AirportInterface_NextFocus_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_AirportInterface_NextFocus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_NextFocus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_NextFocus<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_NextFocus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_NextFocus<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_AirportInterface_NextFocus : public Callback_AirportInterface_NextFocus_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_AirportInterface_NextFocus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_NextFocus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_NextFocus<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_NextFocus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_NextFocusPtr
newCallback_AirportInterface_NextFocus(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_NextFocus<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_AirportInterface_getSimT : public Callback_AirportInterface_getSimT_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Float);

    CallbackNC_AirportInterface_getSimT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::ATCDisplay::AirportInterfacePrx proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(result->getProxy());
        ::Ice::Float ret;
        try
        {
            ret = proxy->end_getSimT(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_AirportInterface_getSimTPtr
newCallback_AirportInterface_getSimT(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getSimT<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_getSimTPtr
newCallback_AirportInterface_getSimT(T* instance, void (T::*cb)(::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getSimT<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AirportInterface_getSimT : public Callback_AirportInterface_getSimT_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Float, const CT&);

    Callback_AirportInterface_getSimT(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::ATCDisplay::AirportInterfacePrx proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(result->getProxy());
        ::Ice::Float ret;
        try
        {
            ret = proxy->end_getSimT(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_AirportInterface_getSimTPtr
newCallback_AirportInterface_getSimT(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getSimT<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_getSimTPtr
newCallback_AirportInterface_getSimT(T* instance, void (T::*cb)(::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getSimT<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AirportInterface_getMaxFlights : public Callback_AirportInterface_getMaxFlights_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AirportInterface_getMaxFlights(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::ATCDisplay::AirportInterfacePrx proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_getMaxFlights(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_AirportInterface_getMaxFlightsPtr
newCallback_AirportInterface_getMaxFlights(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getMaxFlights<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_getMaxFlightsPtr
newCallback_AirportInterface_getMaxFlights(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getMaxFlights<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AirportInterface_getMaxFlights : public Callback_AirportInterface_getMaxFlights_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AirportInterface_getMaxFlights(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::ATCDisplay::AirportInterfacePrx proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_getMaxFlights(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_AirportInterface_getMaxFlightsPtr
newCallback_AirportInterface_getMaxFlights(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getMaxFlights<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_getMaxFlightsPtr
newCallback_AirportInterface_getMaxFlights(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getMaxFlights<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_AirportInterface_getPoints : public Callback_AirportInterface_getPoints_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_AirportInterface_getPoints(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::ATCDisplay::AirportInterfacePrx proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_getPoints(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_AirportInterface_getPointsPtr
newCallback_AirportInterface_getPoints(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getPoints<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_AirportInterface_getPointsPtr
newCallback_AirportInterface_getPoints(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_AirportInterface_getPoints<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_AirportInterface_getPoints : public Callback_AirportInterface_getPoints_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_AirportInterface_getPoints(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::ATCDisplay::AirportInterfacePrx proxy = ::ATCDisplay::AirportInterfacePrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_getPoints(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_AirportInterface_getPointsPtr
newCallback_AirportInterface_getPoints(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getPoints<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_AirportInterface_getPointsPtr
newCallback_AirportInterface_getPoints(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_AirportInterface_getPoints<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
