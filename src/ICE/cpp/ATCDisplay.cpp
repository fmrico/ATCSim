// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `ATCDisplay.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <ATCDisplay.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_ATCDisplay_AirportInterface_ids[2] =
{
    "::ATCDisplay::AirportInterface",
    "::Ice::Object"
};
const ::std::string iceC_ATCDisplay_AirportInterface_ops[] =
{
    "NextFocus",
    "UpdateSimT",
    "getAirportInfo",
    "getFlights",
    "getMaxFlights",
    "getPoints",
    "getSimT",
    "getStorm",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};
const ::std::string iceC_ATCDisplay_AirportInterface_getFlights_name = "getFlights";
const ::std::string iceC_ATCDisplay_AirportInterface_getStorm_name = "getStorm";
const ::std::string iceC_ATCDisplay_AirportInterface_getAirportInfo_name = "getAirportInfo";
const ::std::string iceC_ATCDisplay_AirportInterface_UpdateSimT_name = "UpdateSimT";
const ::std::string iceC_ATCDisplay_AirportInterface_NextFocus_name = "NextFocus";
const ::std::string iceC_ATCDisplay_AirportInterface_getSimT_name = "getSimT";
const ::std::string iceC_ATCDisplay_AirportInterface_getMaxFlights_name = "getMaxFlights";
const ::std::string iceC_ATCDisplay_AirportInterface_getPoints_name = "getPoints";

}

bool
ATCDisplay::AirportInterface::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_ATCDisplay_AirportInterface_ids, iceC_ATCDisplay_AirportInterface_ids + 2, s);
}

::std::vector<::std::string>
ATCDisplay::AirportInterface::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_ATCDisplay_AirportInterface_ids[0], &iceC_ATCDisplay_AirportInterface_ids[2]);
}

::std::string
ATCDisplay::AirportInterface::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
ATCDisplay::AirportInterface::ice_staticId()
{
    static const ::std::string typeId = "::ATCDisplay::AirportInterface";
    return typeId;
}

bool
ATCDisplay::AirportInterface::_iceD_getFlights(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    ::ATCDisplay::ATCDFlights ret = this->getFlights(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
ATCDisplay::AirportInterface::_iceD_getStorm(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    ::ATCDisplay::ATCDStorm ret = this->getStorm(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
ATCDisplay::AirportInterface::_iceD_getAirportInfo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    ::ATCDisplay::ATCDAirport ret = this->getAirportInfo(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
ATCDisplay::AirportInterface::_iceD_UpdateSimT(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    float iceP_inc;
    istr->readAll(iceP_inc);
    inS.endReadParams();
    this->UpdateSimT(iceP_inc, current);
    inS.writeEmptyParams();
    return true;
}

bool
ATCDisplay::AirportInterface::_iceD_NextFocus(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->NextFocus(current);
    inS.writeEmptyParams();
    return true;
}

bool
ATCDisplay::AirportInterface::_iceD_getSimT(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    float ret = this->getSimT(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
ATCDisplay::AirportInterface::_iceD_getMaxFlights(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    int ret = this->getMaxFlights(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
ATCDisplay::AirportInterface::_iceD_getPoints(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Idempotent, current.mode);
    inS.readEmptyParams();
    int ret = this->getPoints(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
ATCDisplay::AirportInterface::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_ATCDisplay_AirportInterface_ops, iceC_ATCDisplay_AirportInterface_ops + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_ATCDisplay_AirportInterface_ops)
    {
        case 0:
        {
            return _iceD_NextFocus(in, current);
        }
        case 1:
        {
            return _iceD_UpdateSimT(in, current);
        }
        case 2:
        {
            return _iceD_getAirportInfo(in, current);
        }
        case 3:
        {
            return _iceD_getFlights(in, current);
        }
        case 4:
        {
            return _iceD_getMaxFlights(in, current);
        }
        case 5:
        {
            return _iceD_getPoints(in, current);
        }
        case 6:
        {
            return _iceD_getSimT(in, current);
        }
        case 7:
        {
            return _iceD_getStorm(in, current);
        }
        case 8:
        {
            return _iceD_ice_id(in, current);
        }
        case 9:
        {
            return _iceD_ice_ids(in, current);
        }
        case 10:
        {
            return _iceD_ice_isA(in, current);
        }
        case 11:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
ATCDisplay::AirportInterfacePrx::_iceI_getFlights(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::ATCDisplay::ATCDFlights>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_ATCDisplay_AirportInterface_getFlights_name);
    outAsync->invoke(iceC_ATCDisplay_AirportInterface_getFlights_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
ATCDisplay::AirportInterfacePrx::_iceI_getStorm(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::ATCDisplay::ATCDStorm>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_ATCDisplay_AirportInterface_getStorm_name);
    outAsync->invoke(iceC_ATCDisplay_AirportInterface_getStorm_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
ATCDisplay::AirportInterfacePrx::_iceI_getAirportInfo(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::ATCDisplay::ATCDAirport>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_ATCDisplay_AirportInterface_getAirportInfo_name);
    outAsync->invoke(iceC_ATCDisplay_AirportInterface_getAirportInfo_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
ATCDisplay::AirportInterfacePrx::_iceI_UpdateSimT(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, float iceP_inc, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_ATCDisplay_AirportInterface_UpdateSimT_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_inc);
        },
        nullptr);
}

void
ATCDisplay::AirportInterfacePrx::_iceI_NextFocus(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_ATCDisplay_AirportInterface_NextFocus_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
ATCDisplay::AirportInterfacePrx::_iceI_getSimT(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<float>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_ATCDisplay_AirportInterface_getSimT_name);
    outAsync->invoke(iceC_ATCDisplay_AirportInterface_getSimT_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
ATCDisplay::AirportInterfacePrx::_iceI_getMaxFlights(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_ATCDisplay_AirportInterface_getMaxFlights_name);
    outAsync->invoke(iceC_ATCDisplay_AirportInterface_getMaxFlights_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
ATCDisplay::AirportInterfacePrx::_iceI_getPoints(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_ATCDisplay_AirportInterface_getPoints_name);
    outAsync->invoke(iceC_ATCDisplay_AirportInterface_getPoints_name, ::Ice::OperationMode::Idempotent, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::shared_ptr<::Ice::ObjectPrx>
ATCDisplay::AirportInterfacePrx::_newInstance() const
{
    return ::IceInternal::createProxy<AirportInterfacePrx>();
}

const ::std::string&
ATCDisplay::AirportInterfacePrx::ice_staticId()
{
    return ATCDisplay::AirportInterface::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_ATCDisplay_AirportInterface_getFlights_name = "getFlights";

const ::std::string iceC_ATCDisplay_AirportInterface_getStorm_name = "getStorm";

const ::std::string iceC_ATCDisplay_AirportInterface_getAirportInfo_name = "getAirportInfo";

const ::std::string iceC_ATCDisplay_AirportInterface_UpdateSimT_name = "UpdateSimT";

const ::std::string iceC_ATCDisplay_AirportInterface_NextFocus_name = "NextFocus";

const ::std::string iceC_ATCDisplay_AirportInterface_getSimT_name = "getSimT";

const ::std::string iceC_ATCDisplay_AirportInterface_getMaxFlights_name = "getMaxFlights";

const ::std::string iceC_ATCDisplay_AirportInterface_getPoints_name = "getPoints";

}
::IceProxy::Ice::Object* ::IceProxy::ATCDisplay::upCast(::IceProxy::ATCDisplay::AirportInterface* p) { return p; }

void
::IceProxy::ATCDisplay::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::ATCDisplay::AirportInterface>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::ATCDisplay::AirportInterface;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::ATCDisplay::AirportInterface::_iceI_begin_getFlights(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_ATCDisplay_AirportInterface_getFlights_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_ATCDisplay_AirportInterface_getFlights_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_ATCDisplay_AirportInterface_getFlights_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_ATCDisplay_AirportInterface_getFlights_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::ATCDisplay::ATCDFlights
IceProxy::ATCDisplay::AirportInterface::end_getFlights(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_ATCDisplay_AirportInterface_getFlights_name);
    ::ATCDisplay::ATCDFlights ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::ATCDisplay::AirportInterface::_iceI_begin_getStorm(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_ATCDisplay_AirportInterface_getStorm_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_ATCDisplay_AirportInterface_getStorm_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_ATCDisplay_AirportInterface_getStorm_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_ATCDisplay_AirportInterface_getStorm_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::ATCDisplay::ATCDStorm
IceProxy::ATCDisplay::AirportInterface::end_getStorm(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_ATCDisplay_AirportInterface_getStorm_name);
    ::ATCDisplay::ATCDStorm ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::ATCDisplay::AirportInterface::_iceI_begin_getAirportInfo(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_ATCDisplay_AirportInterface_getAirportInfo_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_ATCDisplay_AirportInterface_getAirportInfo_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_ATCDisplay_AirportInterface_getAirportInfo_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_ATCDisplay_AirportInterface_getAirportInfo_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::ATCDisplay::ATCDAirport
IceProxy::ATCDisplay::AirportInterface::end_getAirportInfo(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_ATCDisplay_AirportInterface_getAirportInfo_name);
    ::ATCDisplay::ATCDAirport ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::ATCDisplay::AirportInterface::_iceI_begin_UpdateSimT(::Ice::Float iceP_inc, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_ATCDisplay_AirportInterface_UpdateSimT_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_ATCDisplay_AirportInterface_UpdateSimT_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_inc);
        result->endWriteParams();
        result->invoke(iceC_ATCDisplay_AirportInterface_UpdateSimT_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::ATCDisplay::AirportInterface::end_UpdateSimT(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_ATCDisplay_AirportInterface_UpdateSimT_name);
}

::Ice::AsyncResultPtr
IceProxy::ATCDisplay::AirportInterface::_iceI_begin_NextFocus(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_ATCDisplay_AirportInterface_NextFocus_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_ATCDisplay_AirportInterface_NextFocus_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_ATCDisplay_AirportInterface_NextFocus_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::ATCDisplay::AirportInterface::end_NextFocus(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_ATCDisplay_AirportInterface_NextFocus_name);
}

::Ice::AsyncResultPtr
IceProxy::ATCDisplay::AirportInterface::_iceI_begin_getSimT(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_ATCDisplay_AirportInterface_getSimT_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_ATCDisplay_AirportInterface_getSimT_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_ATCDisplay_AirportInterface_getSimT_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_ATCDisplay_AirportInterface_getSimT_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Float
IceProxy::ATCDisplay::AirportInterface::end_getSimT(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_ATCDisplay_AirportInterface_getSimT_name);
    ::Ice::Float ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::ATCDisplay::AirportInterface::_iceI_begin_getMaxFlights(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_ATCDisplay_AirportInterface_getMaxFlights_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_ATCDisplay_AirportInterface_getMaxFlights_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_ATCDisplay_AirportInterface_getMaxFlights_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_ATCDisplay_AirportInterface_getMaxFlights_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::ATCDisplay::AirportInterface::end_getMaxFlights(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_ATCDisplay_AirportInterface_getMaxFlights_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::ATCDisplay::AirportInterface::_iceI_begin_getPoints(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_ATCDisplay_AirportInterface_getPoints_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_ATCDisplay_AirportInterface_getPoints_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_ATCDisplay_AirportInterface_getPoints_name, ::Ice::Idempotent, context);
        result->writeEmptyParams();
        result->invoke(iceC_ATCDisplay_AirportInterface_getPoints_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::ATCDisplay::AirportInterface::end_getPoints(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_ATCDisplay_AirportInterface_getPoints_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::IceProxy::Ice::Object*
IceProxy::ATCDisplay::AirportInterface::_newInstance() const
{
    return new AirportInterface;
}

const ::std::string&
IceProxy::ATCDisplay::AirportInterface::ice_staticId()
{
    return ::ATCDisplay::AirportInterface::ice_staticId();
}

ATCDisplay::AirportInterface::~AirportInterface()
{
}

::Ice::Object* ATCDisplay::upCast(::ATCDisplay::AirportInterface* p) { return p; }


namespace
{
const ::std::string iceC_ATCDisplay_AirportInterface_ids[2] =
{
    "::ATCDisplay::AirportInterface",
    "::Ice::Object"
};

}

bool
ATCDisplay::AirportInterface::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_ATCDisplay_AirportInterface_ids, iceC_ATCDisplay_AirportInterface_ids + 2, s);
}

::std::vector< ::std::string>
ATCDisplay::AirportInterface::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_ATCDisplay_AirportInterface_ids[0], &iceC_ATCDisplay_AirportInterface_ids[2]);
}

const ::std::string&
ATCDisplay::AirportInterface::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
ATCDisplay::AirportInterface::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::ATCDisplay::AirportInterface";
    return typeId;
#else
    return iceC_ATCDisplay_AirportInterface_ids[0];
#endif
}

bool
ATCDisplay::AirportInterface::_iceD_getFlights(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    ::ATCDisplay::ATCDFlights ret = this->getFlights(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
ATCDisplay::AirportInterface::_iceD_getStorm(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    ::ATCDisplay::ATCDStorm ret = this->getStorm(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
ATCDisplay::AirportInterface::_iceD_getAirportInfo(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    ::ATCDisplay::ATCDAirport ret = this->getAirportInfo(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
ATCDisplay::AirportInterface::_iceD_UpdateSimT(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Float iceP_inc;
    istr->read(iceP_inc);
    inS.endReadParams();
    this->UpdateSimT(iceP_inc, current);
    inS.writeEmptyParams();
    return true;
}

bool
ATCDisplay::AirportInterface::_iceD_NextFocus(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->NextFocus(current);
    inS.writeEmptyParams();
    return true;
}

bool
ATCDisplay::AirportInterface::_iceD_getSimT(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    ::Ice::Float ret = this->getSimT(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
ATCDisplay::AirportInterface::_iceD_getMaxFlights(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    ::Ice::Int ret = this->getMaxFlights(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
ATCDisplay::AirportInterface::_iceD_getPoints(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Idempotent, current.mode);
    inS.readEmptyParams();
    ::Ice::Int ret = this->getPoints(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

namespace
{
const ::std::string iceC_ATCDisplay_AirportInterface_all[] =
{
    "NextFocus",
    "UpdateSimT",
    "getAirportInfo",
    "getFlights",
    "getMaxFlights",
    "getPoints",
    "getSimT",
    "getStorm",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

bool
ATCDisplay::AirportInterface::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_ATCDisplay_AirportInterface_all, iceC_ATCDisplay_AirportInterface_all + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_ATCDisplay_AirportInterface_all)
    {
        case 0:
        {
            return _iceD_NextFocus(in, current);
        }
        case 1:
        {
            return _iceD_UpdateSimT(in, current);
        }
        case 2:
        {
            return _iceD_getAirportInfo(in, current);
        }
        case 3:
        {
            return _iceD_getFlights(in, current);
        }
        case 4:
        {
            return _iceD_getMaxFlights(in, current);
        }
        case 5:
        {
            return _iceD_getPoints(in, current);
        }
        case 6:
        {
            return _iceD_getSimT(in, current);
        }
        case 7:
        {
            return _iceD_getStorm(in, current);
        }
        case 8:
        {
            return _iceD_ice_id(in, current);
        }
        case 9:
        {
            return _iceD_ice_ids(in, current);
        }
        case 10:
        {
            return _iceD_ice_isA(in, current);
        }
        case 11:
        {
            return _iceD_ice_ping(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
ATCDisplay::AirportInterface::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::ATCDisplay::AirportInterface, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
ATCDisplay::AirportInterface::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::ATCDisplay::AirportInterface, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
ATCDisplay::_icePatchObjectPtr(AirportInterfacePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::ATCDisplay::AirportInterfacePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::ATCDisplay::AirportInterface::ice_staticId(), v);
    }
}

namespace Ice
{
}

#endif
